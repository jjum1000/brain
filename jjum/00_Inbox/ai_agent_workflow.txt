# AI ÏóêÏù¥Ï†ÑÌä∏ Ï§ëÏã¨ ÏßÄÏãù Í¥ÄÎ¶¨ ÏãúÏä§ÌÖú - Ïû¨ÏÑ§Í≥Ñ

> **ÌïµÏã¨ Ï†ÑÏ†ú**: ÏûëÏóÖÏûêÎäî Ïù∏Í∞ÑÏù¥ ÏïÑÎãå **AI ÏóêÏù¥Ï†ÑÌä∏(Claude Code, Claude API Îì±)**
> 
> **ÏÑ§Í≥Ñ ÏõêÏπô**: 
> 1. Ïù∏Í∞ÑÏö© UX/ÌîºÎìúÎ∞± Ï†úÍ±∞ ‚Üí ÏóêÏù¥Ï†ÑÌä∏ Í∞Ñ Îç∞Ïù¥ÌÑ∞ ÍµêÌôò ÏµúÏ†ÅÌôî
> 2. ÏÑ∏ÏÖò ÎèÖÎ¶ΩÏÑ± Î≥¥Ïû• ‚Üí Î™®Îì† ÌïÑÏöî Ï†ïÎ≥¥Î•º Íµ¨Ï°∞ÌôîÎêú ÌååÏùºÏóêÏÑú ÌöçÎìù

---

## ü§ñ AI ÏóêÏù¥Ï†ÑÌä∏ ÏûëÏóÖ ÌäπÏÑ± Î∂ÑÏÑù

### Ïù∏Í∞Ñ vs AI ÏóêÏù¥Ï†ÑÌä∏ Ï∞®Ïù¥Ï†ê

| Ìï≠Î™© | Ïù∏Í∞Ñ ÏûëÏóÖÏûê | AI ÏóêÏù¥Ï†ÑÌä∏ |
|-----|----------|-----------|
| **Î©îÎ™®Î¶¨** | ÏÑ∏ÏÖò Í∞Ñ Ïó∞ÏÜçÏ†Å | ÏÑ∏ÏÖòÎßàÎã§ Ï¥àÍ∏∞Ìôî |
| **ÌîºÎìúÎ∞±** | ÏãúÍ∞ÅÏ†Å ÏïåÎ¶º ÌïÑÏöî | JSON/Íµ¨Ï°∞Ìôî Îç∞Ïù¥ÌÑ∞Îßå ÌïÑÏöî |
| **Ìà¨Î™ÖÏÑ±** | Ï≤òÎ¶¨ Í≥ºÏ†ï ÏÑ§Î™Ö ÌïÑÏöî | Í≤∞Í≥ºÎ¨ºÎßå Ï§ëÏöî |
| **ÌÜµÏ†ú** | ÏàòÎèô ÌôïÏù∏ ÏòµÏÖò ÌïÑÏöî | Í∑úÏπô Í∏∞Î∞ò ÏûêÎèô Ïã§Ìñâ |
| **ÏóêÎü¨ Ï≤òÎ¶¨** | "Ïôú Ïã§Ìå®ÌñàÎÇò" ÏÑ§Î™Ö | "Ïñ¥ÎñªÍ≤å Î≥µÍµ¨ÌïòÎÇò" Ï†ïÎ≥¥ |
| **Ï†ïÎ≥¥ Ï†ëÍ∑º** | ÌÉêÏÉâ/Í≤ÄÏÉâ | Î™ÖÏãúÏ†Å Í≤ΩÎ°ú ÌïÑÏöî |

### Ï†úÍ±∞Ìï¥Ïïº Ìï† Ïù∏Í∞Ñ Ï§ëÏã¨ ÏöîÏÜå

```diff
- ‚ùå Obsidian ÏïåÎ¶º (new Notice(...))
- ‚ùå ÏÇ¨Ïö©Ïûê ÌôïÏù∏ ÌîÑÎ°¨ÌîÑÌä∏ (semi-auto Î™®Îìú)
- ‚ùå ÏãúÍ∞ÅÏ†Å Î°úÍ∑∏ ÎåÄÏãúÎ≥¥Îìú
- ‚ùå "Ï≤òÎ¶¨ Ï§ë..." ÏßÑÌñâ ÏÉÅÌÉú ÌëúÏãú
- ‚ùå ÏàòÎèô Ïû¨Î∂ÑÎ•ò Î™ÖÎ†πÏñ¥
- ‚ùå ÌïôÏäµ Í≥°ÏÑ† Í≥†Î†§Ìïú Ï†êÏßÑÏ†Å Í∏∞Îä• ÎèÑÏûÖ

+ ‚úÖ Íµ¨Ï°∞ÌôîÎêú ÏûëÏóÖ Î™ÖÏÑ∏ÏÑú (JSON/YAML)
+ ‚úÖ Î™ÖÌôïÌïú ÌååÏùº Í≤ΩÎ°ú Î†àÏßÄÏä§Ìä∏Î¶¨
+ ‚úÖ ÏÉÅÌÉú Ï∂îÏ†Å Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§
+ ‚úÖ ÏóêÏù¥Ï†ÑÌä∏ Í∞Ñ ÌÜµÏã† ÌîÑÎ°úÌÜ†ÏΩú
+ ‚úÖ Í≤∞Ï†ïÎ°†Ï†Å Ïã§Ìñâ ÏàúÏÑú
+ ‚úÖ ÏûêÎèô Î≥µÍµ¨ Î©îÏª§ÎãàÏ¶ò
```

---

## üìã AI ÏóêÏù¥Ï†ÑÌä∏ ÏûëÏóÖ ÏãúÏûë ÌîÑÎ°úÌÜ†ÏΩú

### Î¨∏Ï†ú: ÏÑ∏ÏÖò Ï¥àÍ∏∞Ìôî Ïãú "Î¨¥ÏóáÏùÑ Ïñ¥ÎñªÍ≤å Ìï¥Ïïº ÌïòÎäîÍ∞Ä?"

#### ÏãúÎÇòÎ¶¨Ïò§ 1: Claude CodeÍ∞Ä ÏûëÏóÖ ÏãúÏûë
```
‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
‚îÇ  Claude Code Ïã§Ìñâ                        ‚îÇ
‚îÇ  $ claude-code "ÏÉà Î¨∏ÏÑú Ï≤òÎ¶¨Ìï¥Ï§ò"         ‚îÇ
‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
              ‚Üì
   ‚ùì Î¨∏Ï†ú: ClaudeÎäî Îã§ÏùåÏùÑ Î™®Î¶Ñ
   - Ïñ¥Îñ§ Î¨∏ÏÑúÎ•º Ï≤òÎ¶¨Ìï¥Ïïº ÌïòÎÇò?
   - ÌååÏùºÏù¥ Ïñ¥Îîî ÏûàÎÇò?
   - Ïñ¥Îñ§ ÏàúÏÑúÎ°ú ÏûëÏóÖÌïòÎÇò?
   - Ïù¥Ï†ÑÏóê Ï≤òÎ¶¨Îêú Î¨∏ÏÑúÎäî?
```

### Ìï¥Í≤∞: Work Queue + Manifest ÏãúÏä§ÌÖú

#### ÌïµÏã¨ Íµ¨Ï°∞: 3Í∞úÏùò ÏÉÅÌÉú Ï∂îÏ†Å ÌååÏùº

```
.obsidian/state/
‚îú‚îÄ‚îÄ work-queue.json          # Ï≤òÎ¶¨ ÎåÄÍ∏∞ Î™©Î°ù
‚îú‚îÄ‚îÄ processing-manifest.json # ÌòÑÏû¨ Ï≤òÎ¶¨ Ï§ë
‚îî‚îÄ‚îÄ completion-log.json      # Ï≤òÎ¶¨ ÏôÑÎ£å Ïù¥Î†•
```

---

## üóÇÔ∏è ÏÉÅÌÉú Ï∂îÏ†Å ÏãúÏä§ÌÖú ÏÉÅÏÑ∏ ÏÑ§Í≥Ñ

### 1. Work Queue (ÏûëÏóÖ ÎåÄÍ∏∞Ïó¥)

```json
{
  "version": "1.0",
  "last_updated": "2025-10-19T14:30:00Z",
  "queue": [
    {
      "id": "wq-001",
      "type": "inbox-file",
      "priority": 1,
      "created_at": "2025-10-19T14:25:00Z",
      "file": {
        "path": "00_Inbox/react-server-components.md",
        "size_bytes": 12450,
        "hash": "sha256:a3f2b1c...",
        "source": "web-clipper"
      },
      "required_agents": [
        "normalization",
        "keyword-extraction", 
        "linking",
        "filing"
      ],
      "context": {
        "origin_url": "https://example.com/article",
        "clipped_at": "2025-10-19T14:20:00Z"
      }
    },
    {
      "id": "wq-002",
      "type": "git-commit",
      "priority": 2,
      "created_at": "2025-10-19T14:28:00Z",
      "file": {
        "path": "00_Inbox/git-imports/a3f2b1c-UserDashboard.jsx.md",
        "size_bytes": 8920,
        "hash": "sha256:xyz789...",
        "source": "git-commit"
      },
      "required_agents": [
        "normalization",
        "keyword-extraction",
        "linking",
        "tagging",
        "filing"
      ],
      "context": {
        "commit_hash": "a3f2b1c",
        "commit_message": "refactor: useState to Zustand",
        "author": "developer",
        "changed_files": ["src/components/UserDashboard.jsx"]
      }
    }
  ]
}
```

#### Work Queue ÏóÖÎç∞Ïù¥Ìä∏ Î©îÏª§ÎãàÏ¶ò

```javascript
// .obsidian/scripts/queue-manager.js

class WorkQueueManager {
  constructor() {
    this.queuePath = '.obsidian/state/work-queue.json';
  }
  
  // ÌååÏùº ÏÉùÏÑ± Ïãú ÏûêÎèô Ï∂îÍ∞Ä
  async addToQueue(filePath, metadata = {}) {
    const queue = await this.load();
    
    const item = {
      id: `wq-${Date.now()}`,
      type: this.detectType(filePath),
      priority: this.calculatePriority(filePath, metadata),
      created_at: new Date().toISOString(),
      file: {
        path: filePath,
        size_bytes: fs.statSync(filePath).size,
        hash: await this.calculateHash(filePath),
        source: metadata.source || 'unknown'
      },
      required_agents: this.determineAgents(filePath, metadata),
      context: metadata
    };
    
    queue.queue.push(item);
    queue.last_updated = new Date().toISOString();
    
    await this.save(queue);
    return item.id;
  }
  
  // Îã§Ïùå ÏûëÏóÖ Í∞ÄÏ†∏Ïò§Í∏∞
  async getNext() {
    const queue = await this.load();
    
    // Ïö∞ÏÑ†ÏàúÏúÑ Ï†ïÎ†¨ (priority ÎÇÆÏùÑÏàòÎ°ù Î®ºÏ†Ä)
    queue.queue.sort((a, b) => a.priority - b.priority);
    
    if (queue.queue.length === 0) {
      return null;
    }
    
    // Ï≤´ Î≤àÏß∏ Ìï≠Î™© Î∞òÌôò (Ï†úÍ±∞ÌïòÏßÄ ÏïäÏùå)
    return queue.queue[0];
  }
  
  // ÏûëÏóÖ ÏãúÏûë Ïãú Processing ManifestÎ°ú Ïù¥Îèô
  async startProcessing(workItemId) {
    const queue = await this.load();
    const index = queue.queue.findIndex(item => item.id === workItemId);
    
    if (index === -1) {
      throw new Error(`Work item ${workItemId} not found`);
    }
    
    const item = queue.queue.splice(index, 1)[0];
    queue.last_updated = new Date().toISOString();
    await this.save(queue);
    
    // Processing ManifestÏóê Ï∂îÍ∞Ä
    await ProcessingManifest.add(item);
    
    return item;
  }
}
```

---

### 2. Processing Manifest (Ï≤òÎ¶¨ Ï§ë ÏÉÅÌÉú)

```json
{
  "version": "1.0",
  "current_processing": [
    {
      "work_id": "wq-001",
      "file_path": "00_Inbox/react-server-components.md",
      "started_at": "2025-10-19T14:30:15Z",
      "agent_pipeline": [
        {
          "name": "normalization",
          "status": "completed",
          "started_at": "2025-10-19T14:30:15Z",
          "completed_at": "2025-10-19T14:30:17Z",
          "duration_ms": 2100,
          "output": {
            "modified_path": "00_Inbox/react-server-components.md",
            "changes": ["html_removed", "frontmatter_added"]
          }
        },
        {
          "name": "keyword-extraction",
          "status": "in-progress",
          "started_at": "2025-10-19T14:30:17Z",
          "current_step": "nlp_processing"
        },
        {
          "name": "linking",
          "status": "pending"
        },
        {
          "name": "filing",
          "status": "pending"
        }
      ],
      "errors": [],
      "retries": 0
    }
  ]
}
```

#### Processing Manifest Í¥ÄÎ¶¨

```javascript
// .obsidian/scripts/processing-manifest.js

class ProcessingManifest {
  constructor() {
    this.manifestPath = '.obsidian/state/processing-manifest.json';
  }
  
  // ÏÉà ÏûëÏóÖ ÏãúÏûë
  async add(workItem) {
    const manifest = await this.load();
    
    const processing = {
      work_id: workItem.id,
      file_path: workItem.file.path,
      started_at: new Date().toISOString(),
      agent_pipeline: workItem.required_agents.map(name => ({
        name,
        status: 'pending'
      })),
      errors: [],
      retries: 0
    };
    
    manifest.current_processing.push(processing);
    await this.save(manifest);
    
    return processing;
  }
  
  // ÏóêÏù¥Ï†ÑÌä∏ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
  async updateAgent(workId, agentName, status, output = null) {
    const manifest = await this.load();
    const processing = manifest.current_processing.find(p => p.work_id === workId);
    
    if (!processing) {
      throw new Error(`Processing item ${workId} not found`);
    }
    
    const agent = processing.agent_pipeline.find(a => a.name === agentName);
    
    if (!agent) {
      throw new Error(`Agent ${agentName} not found in pipeline`);
    }
    
    agent.status = status;
    
    if (status === 'in-progress') {
      agent.started_at = new Date().toISOString();
    } else if (status === 'completed') {
      agent.completed_at = new Date().toISOString();
      agent.duration_ms = Date.now() - new Date(agent.started_at).getTime();
      agent.output = output;
    } else if (status === 'failed') {
      agent.error = output;
    }
    
    await this.save(manifest);
  }
  
  // Ï†ÑÏ≤¥ ÌååÏù¥ÌîÑÎùºÏù∏ ÏôÑÎ£å ÌôïÏù∏
  isComplete(workId) {
    const manifest = this.loadSync();
    const processing = manifest.current_processing.find(p => p.work_id === workId);
    
    return processing.agent_pipeline.every(a => 
      a.status === 'completed' || a.status === 'skipped'
    );
  }
  
  // ÏôÑÎ£å Ï≤òÎ¶¨
  async complete(workId, finalOutput) {
    const manifest = await this.load();
    const index = manifest.current_processing.findIndex(p => p.work_id === workId);
    
    if (index === -1) {
      throw new Error(`Processing item ${workId} not found`);
    }
    
    const processing = manifest.current_processing.splice(index, 1)[0];
    await this.save(manifest);
    
    // Completion LogÎ°ú Ïù¥Îèô
    await CompletionLog.add(processing, finalOutput);
  }
}
```

---

### 3. Completion Log (ÏôÑÎ£å Ïù¥Î†•)

```json
{
  "version": "1.0",
  "completed": [
    {
      "work_id": "wq-001",
      "file_path": "00_Inbox/react-server-components.md",
      "final_path": "3_Resources/React/react-server-components.md",
      "started_at": "2025-10-19T14:30:15Z",
      "completed_at": "2025-10-19T14:30:45Z",
      "total_duration_ms": 30000,
      "agents_executed": [
        {
          "name": "normalization",
          "duration_ms": 2100,
          "status": "completed"
        },
        {
          "name": "keyword-extraction",
          "duration_ms": 5800,
          "status": "completed"
        },
        {
          "name": "linking",
          "duration_ms": 3200,
          "status": "completed"
        },
        {
          "name": "filing",
          "duration_ms": 1100,
          "status": "completed"
        }
      ],
      "metadata": {
        "keywords_extracted": 8,
        "links_created": 5,
        "tags_added": ["react", "server-components"],
        "destination_folder": "3_Resources/React"
      }
    }
  ]
}
```

---

## üîÑ AI ÏóêÏù¥Ï†ÑÌä∏ Ïã§Ìñâ ÌîåÎ°úÏö∞

### ÏãúÎÇòÎ¶¨Ïò§: Claude CodeÍ∞Ä ÏûëÏóÖ ÏãúÏûë

#### Step 1: ÏûëÏóÖ Ï†ïÎ≥¥ ÌöçÎìù

```bash
# Claude Code Î™ÖÎ†πÏñ¥
$ claude-code "ÏÉàÎ°úÏö¥ Î¨∏ÏÑúÎ•º Ï≤òÎ¶¨Ìï¥Ï§ò"
```

```javascript
// ClaudeÍ∞Ä Ï≤´ Î≤àÏß∏Î°ú Ïã§ÌñâÌïòÎäî ÏΩîÎìú
const WorkQueueManager = require('./.obsidian/scripts/queue-manager');
const ProcessingManifest = require('./.obsidian/scripts/processing-manifest');

async function main() {
  // 1. Work QueueÏóêÏÑú Îã§Ïùå ÏûëÏóÖ Í∞ÄÏ†∏Ïò§Í∏∞
  const queueManager = new WorkQueueManager();
  const nextWork = await queueManager.getNext();
  
  if (!nextWork) {
    console.log('‚úÖ Ï≤òÎ¶¨Ìï† Î¨∏ÏÑúÍ∞Ä ÏóÜÏäµÎãàÎã§.');
    return;
  }
  
  console.log(`üìÑ ÏûëÏóÖ ÏãúÏûë: ${nextWork.file.path}`);
  console.log(`   ÌïÑÏöîÌïú ÏóêÏù¥Ï†ÑÌä∏: ${nextWork.required_agents.join(', ')}`);
  
  // 2. Processing ManifestÏóê Îì±Î°ù
  await queueManager.startProcessing(nextWork.id);
  
  // 3. ÏóêÏù¥Ï†ÑÌä∏ ÌååÏù¥ÌîÑÎùºÏù∏ Ïã§Ìñâ
  await runAgentPipeline(nextWork);
}

main();
```

#### Step 2: ÏóêÏù¥Ï†ÑÌä∏ ÌååÏù¥ÌîÑÎùºÏù∏ Ïã§Ìñâ

```javascript
async function runAgentPipeline(workItem) {
  const manifest = new ProcessingManifest();
  
  for (const agentName of workItem.required_agents) {
    console.log(`‚öôÔ∏è  ${agentName} Ïã§Ìñâ Ï§ë...`);
    
    // ÏóêÏù¥Ï†ÑÌä∏ ÏÉÅÌÉú: pending ‚Üí in-progress
    await manifest.updateAgent(workItem.id, agentName, 'in-progress');
    
    try {
      // ÏóêÏù¥Ï†ÑÌä∏ Ïã§Ìñâ
      const agent = require(`./.obsidian/scripts/agent-modules/${agentName}-agent`);
      
      // ‚úÖ Ï§ëÏöî: ÏóêÏù¥Ï†ÑÌä∏Îäî ÌòÑÏû¨ ÌååÏùº ÏÉÅÌÉúÎ•º ÌååÏùºÏóêÏÑú ÏßÅÏ†ë ÏùΩÏùå
      const currentState = await loadDocumentState(workItem.file.path);
      
      const result = await agent.execute(currentState);
      
      // ÏóêÏù¥Ï†ÑÌä∏ ÏÉÅÌÉú: in-progress ‚Üí completed
      await manifest.updateAgent(workItem.id, agentName, 'completed', result);
      
      console.log(`   ‚úÖ ${agentName} ÏôÑÎ£å`);
      
    } catch (error) {
      console.error(`   ‚ùå ${agentName} Ïã§Ìå®: ${error.message}`);
      
      // ÏóêÏù¥Ï†ÑÌä∏ ÏÉÅÌÉú: in-progress ‚Üí failed
      await manifest.updateAgent(workItem.id, agentName, 'failed', {
        error: error.message,
        stack: error.stack
      });
      
      // ÏóêÎü¨ Ï≤òÎ¶¨ Ï†ÑÎûµ
      if (shouldRetry(error)) {
        console.log(`   üîÑ Ïû¨ÏãúÎèÑ Ï§ë...`);
        // Ïû¨ÏãúÎèÑ Î°úÏßÅ
      } else {
        // ÏπòÎ™ÖÏ†Å ÏóêÎü¨: ÏûëÏóÖ Ï§ëÎã®
        throw error;
      }
    }
  }
  
  // Î™®Îì† ÏóêÏù¥Ï†ÑÌä∏ ÏôÑÎ£å
  const finalOutput = await loadDocumentState(workItem.file.path);
  await manifest.complete(workItem.id, finalOutput);
  
  console.log(`‚úÖ Ï†ÑÏ≤¥ ÌååÏù¥ÌîÑÎùºÏù∏ ÏôÑÎ£å: ${finalOutput.final_path}`);
}
```

#### Step 3: Î¨∏ÏÑú ÏÉÅÌÉú Î°úÎî© (ÏÑ∏ÏÖò ÎèÖÎ¶ΩÏÑ± Î≥¥Ïû•)

```javascript
// ÏóêÏù¥Ï†ÑÌä∏Îäî Ìï≠ÏÉÅ ÌååÏùºÏóêÏÑú ÏµúÏã† ÏÉÅÌÉúÎ•º ÏùΩÏùå
async function loadDocumentState(filePath) {
  const content = fs.readFileSync(filePath, 'utf-8');
  const { data: frontmatter, content: body } = matter(content);
  
  // Íµ¨Ï°∞ÌôîÎêú ÏÉÅÌÉú Í∞ùÏ≤¥ Î∞òÌôò
  return {
    path: filePath,
    frontmatter: frontmatter || {},
    body: body,
    
    // Ï≤òÎ¶¨ Î©îÌÉÄÎç∞Ïù¥ÌÑ∞ (Ïù¥Ï†Ñ ÏóêÏù¥Ï†ÑÌä∏ Í≤∞Í≥º)
    keywords: frontmatter.keywords || [],
    linked_concepts: frontmatter.linked_concepts || [],
    unlinked_keywords: frontmatter.unlinked_keywords || [],
    tags: frontmatter.tags || [],
    
    // ÏõêÎ≥∏ Ï†ïÎ≥¥
    created: frontmatter.created,
    source: frontmatter.source,
    
    // ÌååÏùº Ï†ïÎ≥¥
    size_bytes: fs.statSync(filePath).size,
    last_modified: fs.statSync(filePath).mtime
  };
}
```

---

## üóÑÔ∏è Î¶¨ÏÜåÏä§ Î†àÏßÄÏä§Ìä∏Î¶¨ ÏãúÏä§ÌÖú

### Î¨∏Ï†ú: ÏóêÏù¥Ï†ÑÌä∏Í∞Ä ÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞Ïóê Ï†ëÍ∑ºÌïòÎäî Î∞©Î≤ï

```
ÏóêÏù¥Ï†ÑÌä∏: "Glossary Î™©Î°ùÏù¥ ÌïÑÏöîÌï¥"
‚ùì Ïñ¥ÎîîÏóê ÏûàÏßÄ? 5_Glossary/ Ìè¥Îçî?
‚ùì Î≥ÑÏπ≠(alias)ÏùÄ Ïñ¥ÎñªÍ≤å ÏùΩÏßÄ?
‚ùì Ï∫êÏãúÍ∞Ä ÏûàÎÇò?
```

### Ìï¥Í≤∞: Resource Registry

```json
// .obsidian/state/resource-registry.json
{
  "version": "1.0",
  "last_updated": "2025-10-19T14:00:00Z",
  
  "glossary": {
    "path": "5_Glossary",
    "index_file": ".obsidian/state/glossary-index.json",
    "last_indexed": "2025-10-19T13:50:00Z",
    "total_items": 124,
    "cache_valid": true
  },
  
  "tags": {
    "allowed_tags_file": ".obsidian/config/tag-system.json",
    "last_updated": "2025-10-15T10:00:00Z"
  },
  
  "folders": {
    "inbox": "00_Inbox",
    "git_imports": "00_Inbox/git-imports",
    "projects": "1_Projects",
    "areas": "2_Areas",
    "resources": "3_Resources",
    "archives": "4_Archives",
    "glossary": "5_Glossary"
  },
  
  "filing_rules": {
    "rules_file": ".obsidian/config/filing-rules.json",
    "last_updated": "2025-10-10T08:00:00Z"
  }
}
```

### Glossary Index (ÏÇ¨Ï†Ñ ÎπåÎìú)

```json
// .obsidian/state/glossary-index.json
{
  "version": "1.0",
  "built_at": "2025-10-19T13:50:00Z",
  "items": [
    {
      "id": "react",
      "file": "5_Glossary/React.md",
      "title": "React",
      "aliases": ["Î¶¨Ïï°Ìä∏", "react", "React.js"],
      "tags": ["javascript", "frontend", "library"],
      "related_concepts": ["JSX", "Virtual DOM", "Hooks"]
    },
    {
      "id": "usestate",
      "file": "5_Glossary/useState.md",
      "title": "useState",
      "aliases": ["useState", "use-state"],
      "tags": ["react", "hooks", "state-management"],
      "related_concepts": ["React Hooks", "ÏÉÅÌÉú Í¥ÄÎ¶¨"]
    }
  ],
  
  "title_map": {
    "react": "5_Glossary/React.md",
    "usestate": "5_Glossary/useState.md"
  },
  
  "alias_map": {
    "Î¶¨Ïï°Ìä∏": "5_Glossary/React.md",
    "react.js": "5_Glossary/React.md",
    "use-state": "5_Glossary/useState.md"
  }
}
```

### ÏóêÏù¥Ï†ÑÌä∏Ïùò Î¶¨ÏÜåÏä§ Ï†ëÍ∑º Ìå®ÌÑ¥

```javascript
// linking-agent.js

const ResourceRegistry = require('../resource-registry');

class LinkingAgent {
  async execute(documentState) {
    // 1. Resource RegistryÏóêÏÑú Glossary Ï†ïÎ≥¥ ÌöçÎìù
    const registry = await ResourceRegistry.load();
    const glossaryInfo = registry.glossary;
    
    // 2. Glossary Index Î°úÎìú
    const glossaryIndex = await this.loadGlossaryIndex(glossaryInfo.index_file);
    
    // 3. ÌÇ§ÏõåÎìúÏôÄ Îß§Ïπ≠
    const keywords = documentState.keywords;
    const links = [];
    
    for (const keyword of keywords) {
      const glossaryFile = this.findMatch(keyword, glossaryIndex);
      
      if (glossaryFile) {
        links.push({
          keyword: keyword.text,
          glossary_file: glossaryFile,
          confidence: keyword.score
        });
      }
    }
    
    // 4. Î≥∏Î¨∏Ïóê ÎßÅÌÅ¨ ÏÇΩÏûÖ
    let linkedBody = documentState.body;
    for (const link of links) {
      const linkText = `[[${link.glossary_file.title}]]`;
      linkedBody = this.replaceFirstOccurrence(linkedBody, link.keyword, linkText);
    }
    
    // 5. Frontmatter ÏóÖÎç∞Ïù¥Ìä∏
    const updatedFrontmatter = {
      ...documentState.frontmatter,
      linked_concepts: links.map(l => l.glossary_file.title),
      unlinked_keywords: keywords
        .filter(k => !links.find(l => l.keyword === k.text))
        .map(k => k.text)
    };
    
    // 6. ÌååÏùºÏóê Îã§Ïãú Ïì∞Í∏∞
    await this.saveDocument(documentState.path, updatedFrontmatter, linkedBody);
    
    return {
      agent: 'linking',
      links_created: links.length,
      unlinked_count: updatedFrontmatter.unlinked_keywords.length
    };
  }
  
  findMatch(keyword, glossaryIndex) {
    const normalized = keyword.text.toLowerCase();
    
    // 1. Title ÏßÅÏ†ë Îß§Ïπ≠
    if (glossaryIndex.title_map[normalized]) {
      return glossaryIndex.items.find(
        item => item.file === glossaryIndex.title_map[normalized]
      );
    }
    
    // 2. Alias Îß§Ïπ≠
    if (glossaryIndex.alias_map[normalized]) {
      return glossaryIndex.items.find(
        item => item.file === glossaryIndex.alias_map[normalized]
      );
    }
    
    return null;
  }
}

module.exports = new LinkingAgent();
```

---

## üîß ÏóêÏù¥Ï†ÑÌä∏Î≥Ñ Ïû¨ÏÑ§Í≥Ñ (AI Ï§ëÏã¨)

### Ï†úÍ±∞Îêú ÏöîÏÜå

```diff
Î™®Îì† ÏóêÏù¥Ï†ÑÌä∏ÏóêÏÑú Ï†úÍ±∞:
- ‚ùå ÏßÑÌñâ ÏÉÅÌÉú ÏïåÎ¶º
- ‚ùå ÏÇ¨Ïö©Ïûê ÌôïÏù∏ ÎåÄÍ∏∞
- ‚ùå ÏãúÍ∞ÅÏ†Å ÌîºÎìúÎ∞±
- ‚ùå ÌïôÏäµ Î©îÏª§ÎãàÏ¶ò (ÏÇ¨Ïö©Ïûê ÏÑ†Ìò∏ Ï∂îÏ†Å)
```

### Ï∂îÍ∞ÄÎêú ÏöîÏÜå

```diff
Î™®Îì† ÏóêÏù¥Ï†ÑÌä∏Ïóê Ï∂îÍ∞Ä:
+ ‚úÖ Î™ÖÌôïÌïú ÏûÖÎ†• Ïä§ÌÇ§Îßà Ï†ïÏùò
+ ‚úÖ Î©±Îì±ÏÑ±(Idempotency) Î≥¥Ïû•
+ ‚úÖ Î∂ÄÎ∂Ñ Ïã§Ìå® ÌóàÏö©
+ ‚úÖ ÏÉÅÌÉú Í≤ÄÏ¶ù
```

### ÏóêÏù¥Ï†ÑÌä∏ ÌëúÏ§Ä Ïù∏ÌÑ∞ÌéòÏù¥Ïä§

```javascript
// base-agent.js

class BaseAgent {
  constructor(name) {
    this.name = name;
    this.registry = null;
  }
  
  // Ï¥àÍ∏∞Ìôî: Resource Registry Î°úÎìú
  async initialize() {
    const ResourceRegistry = require('../resource-registry');
    this.registry = await ResourceRegistry.load();
  }
  
  // ÏûÖÎ†• Í≤ÄÏ¶ù
  validateInput(documentState) {
    const required = ['path', 'frontmatter', 'body'];
    
    for (const field of required) {
      if (!documentState[field]) {
        throw new Error(`Missing required field: ${field}`);
      }
    }
    
    return true;
  }
  
  // Ïã§Ìñâ
  async execute(documentState) {
    await this.initialize();
    this.validateInput(documentState);
    
    const startTime = Date.now();
    
    try {
      const result = await this.process(documentState);
      
      const duration = Date.now() - startTime;
      
      return {
        agent: this.name,
        status: 'completed',
        duration_ms: duration,
        ...result
      };
      
    } catch (error) {
      return {
        agent: this.name,
        status: 'failed',
        error: error.message,
        stack: error.stack
      };
    }
  }
  
  // ÏÑúÎ∏åÌÅ¥ÎûòÏä§ÏóêÏÑú Íµ¨ÌòÑ
  async process(documentState) {
    throw new Error('process() must be implemented');
  }
  
  // ÌååÏùº Ï†ÄÏû• Ïú†Ìã∏Î¶¨Ìã∞
  async saveDocument(filePath, frontmatter, body) {
    const yaml = require('js-yaml');
    
    const frontmatterStr = yaml.dump(frontmatter);
    const content = `---\n${frontmatterStr}---\n\n${body}`;
    
    fs.writeFileSync(filePath, content, 'utf-8');
  }
}

module.exports = BaseAgent;
```

---

## üöÄ Ï†ÑÏ≤¥ ÏãúÏä§ÌÖú Ïã§Ìñâ ÏòàÏãú

### Scenario: Claude CodeÍ∞Ä ÏÉà ÏÑ∏ÏÖòÏóêÏÑú ÏûëÏóÖ ÏãúÏûë

```javascript
// main-processor.js

const WorkQueueManager = require('./.obsidian/scripts/queue-manager');
const ProcessingManifest = require('./.obsidian/scripts/processing-manifest');

async function processNextDocument() {
  console.log('ü§ñ AI ÏóêÏù¥Ï†ÑÌä∏ ÏûëÏóÖ ÏãúÏûë\n');
  
  // Step 1: Work Queue ÌôïÏù∏
  console.log('üìã Work Queue ÌôïÏù∏ Ï§ë...');
  const queueManager = new WorkQueueManager();
  const nextWork = await queueManager.getNext();
  
  if (!nextWork) {
    console.log('‚úÖ Ï≤òÎ¶¨Ìï† Î¨∏ÏÑúÍ∞Ä ÏóÜÏäµÎãàÎã§.\n');
    return { status: 'idle', message: 'Queue is empty' };
  }
  
  console.log(`üìÑ ÏûëÏóÖ Î∞úÍ≤¨: ${nextWork.file.path}`);
  console.log(`   Ïö∞ÏÑ†ÏàúÏúÑ: ${nextWork.priority}`);
  console.log(`   ÌïÑÏöî ÏóêÏù¥Ï†ÑÌä∏: ${nextWork.required_agents.join(', ')}\n`);
  
  // Step 2: Processing ManifestÏóê Îì±Î°ù
  console.log('üîÑ ÏûëÏóÖ ÏãúÏûë Îì±Î°ù Ï§ë...');
  await queueManager.startProcessing(nextWork.id);
  const manifest = new ProcessingManifest();
  
  // Step 3: ÏóêÏù¥Ï†ÑÌä∏ ÌååÏù¥ÌîÑÎùºÏù∏ Ïã§Ìñâ
  console.log('‚öôÔ∏è  ÏóêÏù¥Ï†ÑÌä∏ ÌååÏù¥ÌîÑÎùºÏù∏ Ïã§Ìñâ\n');
  
  for (const agentName of nextWork.required_agents) {
    console.log(`   [${agentName}] ÏãúÏûë...`);
    await manifest.updateAgent(nextWork.id, agentName, 'in-progress');
    
    try {
      // ÏóêÏù¥Ï†ÑÌä∏ Î°úÎìú
      const AgentClass = require(`./.obsidian/scripts/agent-modules/${agentName}-agent`);
      const agent = new AgentClass();
      
      // ÌòÑÏû¨ Î¨∏ÏÑú ÏÉÅÌÉú Î°úÎìú (ÌååÏùºÏóêÏÑú)
      const documentState = await loadDocumentState(nextWork.file.path);
      
      // ÏóêÏù¥Ï†ÑÌä∏ Ïã§Ìñâ
      const result = await agent.execute(documentState);
      
      await manifest.updateAgent(nextWork.id, agentName, 'completed', result);
      console.log(`   [${agentName}] ÏôÑÎ£å (${result.duration_ms}ms)`);
      
    } catch (error) {
      console.error(`   [${agentName}] Ïã§Ìå®: ${error.message}`);
      await manifest.updateAgent(nextWork.id, agentName, 'failed', {
        error: error.message
      });
      
      // ÏπòÎ™ÖÏ†Å ÏóêÎü¨Î©¥ Ï§ëÎã®
      throw error;
    }
  }
  
  // Step 4: ÏôÑÎ£å Ï≤òÎ¶¨
  console.log('\n‚úÖ Î™®Îì† ÏóêÏù¥Ï†ÑÌä∏ ÏôÑÎ£å');
  const finalState = await loadDocumentState(nextWork.file.path);
  await manifest.complete(nextWork.id, {
    final_path: finalState.path,
    keywords_extracted: finalState.keywords?.length || 0,
    links_created: finalState.linked_concepts?.length || 0,
    tags_added: finalState.tags?.length || 0
  });
  
  console.log(`üìÅ ÏµúÏ¢Ö ÏúÑÏπò: ${finalState.path}\n`);
  
  return {
    status: 'completed',
    work_id: nextWork.id,
    file: finalState.path
  };
}

// Ïã§Ìñâ
processNextDocument()
  .then(result => {
    console.log('Í≤∞Í≥º:', JSON.stringify(result, null, 2));
  })
  .catch(error => {
    console.error('ÏπòÎ™ÖÏ†Å ÏóêÎü¨:', error);
    process.exit(1);
  });
```

### Ïã§Ìñâ Í≤∞Í≥º Ï∂úÎ†• ÏòàÏãú

```
ü§ñ AI ÏóêÏù¥Ï†ÑÌä∏ ÏûëÏóÖ ÏãúÏûë

üìã Work Queue ÌôïÏù∏ Ï§ë...
üìÑ ÏûëÏóÖ Î∞úÍ≤¨: 00_Inbox/react-server-components.md
   Ïö∞ÏÑ†ÏàúÏúÑ: 1
   ÌïÑÏöî ÏóêÏù¥Ï†ÑÌä∏: normalization, keyword-extraction, linking, filing

üîÑ ÏûëÏóÖ ÏãúÏûë Îì±Î°ù Ï§ë...
‚öôÔ∏è  ÏóêÏù¥Ï†ÑÌä∏ ÌååÏù¥ÌîÑÎùºÏù∏ Ïã§Ìñâ

   [normalization] ÏãúÏûë...
   [normalization] ÏôÑÎ£å (2100ms)
   [keyword-extraction] ÏãúÏûë...
   [keyword-extraction] ÏôÑÎ£å (5800ms)
   [linking] ÏãúÏûë...
   [linking] ÏôÑÎ£å (3200ms)
   [filing] ÏãúÏûë...
   [filing] ÏôÑÎ£å (1100ms)

‚úÖ Î™®Îì† ÏóêÏù¥Ï†ÑÌä∏ ÏôÑÎ£å
üìÅ ÏµúÏ¢Ö ÏúÑÏπò: 3_Resources/React/react-server-components.md

Í≤∞Í≥º: {
  "status": "completed",
  "work_id": "wq-001",
  "file": "3_Resources/React/react-server-components.md"
}
```

---

## üìä AI ÏóêÏù¥Ï†ÑÌä∏ Ï§ëÏã¨ Ïû¨ÏÑ§Í≥Ñ ÎπÑÍµê

### Before: Ïù∏Í∞Ñ Ï§ëÏã¨ ÏÑ§Í≥Ñ

```javascript
// ÏÇ¨Ïö©Ïûê ÌôïÏù∏ ÎåÄÍ∏∞
const shouldContinue = await prompt('Í≥ÑÏÜçÌïòÏãúÍ≤†ÏäµÎãàÍπå?');
if (!shouldContinue) return;

// ÏãúÍ∞ÅÏ†Å ÌîºÎìúÎ∞±
showNotification('Ï≤òÎ¶¨ Ï§ë...');
updateProgressBar(50);

// ÏàòÎèô Ïû¨Î∂ÑÎ•ò
if (userWantsToOverride) {
  moveToCustomLocation();
}
```

### After: AI ÏóêÏù¥Ï†ÑÌä∏ Ï§ëÏã¨

```javascript
// Work QueueÏóêÏÑú ÏûêÎèô ÌöçÎìù
const nextWork = await queueManager.getNext();

// ÏÉÅÌÉúÎäî ÌååÏùºÏóê Í∏∞Î°ù (ÏÑ∏ÏÖò ÎèÖÎ¶ΩÏÑ±)
await manifest.updateAgent(workId, agentName, 'completed', result);

// Î™®Îì† Í≤∞Ï†ïÏùÄ Í∑úÏπô Í∏∞Î∞ò
const destination = FilingRules.determine(document.tags);
await moveFile(document.path, destination);
```

---

## üéØ ÌïµÏã¨ Í∞úÏÑ† ÏÇ¨Ìï≠ ÏöîÏïΩ

### 1. ÏÑ∏ÏÖò ÎèÖÎ¶ΩÏÑ± Î≥¥Ïû•

```
‚úÖ Work Queue: Î¨¥ÏóáÏùÑ Ï≤òÎ¶¨Ìï†ÏßÄ
‚úÖ Processing Manifest: ÌòÑÏû¨ Ïñ¥ÎîîÍπåÏßÄ ÏßÑÌñâÎêòÏóàÎäîÏßÄ
‚úÖ Resource Registry: ÌïÑÏöîÌïú Îç∞Ïù¥ÌÑ∞Í∞Ä Ïñ¥ÎîîÏóê ÏûàÎäîÏßÄ
‚úÖ Glossary Index: ÏÇ¨Ï†Ñ ÎπåÎìúÎêú Ïù∏Îç±Ïä§
```

### 2. Ïù∏Í∞Ñ UX Ï†úÍ±∞

```
‚ùå ÏïåÎ¶º, ÌîÑÎ°¨ÌîÑÌä∏, ÏßÑÌñâ ÌëúÏãú
‚úÖ Íµ¨Ï°∞ÌôîÎêú JSON ÏÉÅÌÉú ÌååÏùº
‚úÖ Î°úÍ∑∏Îäî ÌååÏùºÎ°ú Ï†ÄÏû•
```

### 3. Î©±Îì±ÏÑ± Î∞è Î≥µÍµ¨ Í∞ÄÎä•ÏÑ±

```javascript
// ÎèôÏùº ÏûëÏóÖÏùÑ Ïó¨Îü¨ Î≤à Ïã§ÌñâÌï¥ÎèÑ ÏïàÏ†Ñ
if (documentState.frontmatter.status === 'processed') {
  console.log('Ïù¥ÎØ∏ Ï≤òÎ¶¨Îê®, Í±¥ÎÑàÎúÄ');
  return;
}

// Ï§ëÍ∞Ñ Ïã§Ìå® Ïãú Ïû¨Í∞ú Í∞ÄÎä•
const manifest = await ProcessingManifest.load();
const lastCompleted = manifest.agent_pipeline.findLast(a => a.status === 'completed');
// lastCompleted Îã§ÏùåÎ∂ÄÌÑ∞ Ïû¨ÏãúÏûë
```

### 4. ÏôÑÏ†Ñ ÏûêÎèôÌôî

```
Ìä∏Î¶¨Í±∞: ÌååÏùº ÏÉùÏÑ± ‚Üí Work Queue ÏûêÎèô Ï∂îÍ∞Ä
Ïã§Ìñâ: Claude Code ‚Üí Queue ÌôïÏù∏ ‚Üí ÏûêÎèô Ï≤òÎ¶¨
ÏôÑÎ£å: Completion Log Í∏∞Î°ù ‚Üí Îã§Ïùå ÏûëÏóÖ ÎåÄÍ∏∞
```

---

## üöÄ AI ÏóêÏù¥Ï†ÑÌä∏ Ïã§Ìñâ ÏãúÎÇòÎ¶¨Ïò§

### Scenario 1: Git Commit ‚Üí ÏûêÎèô Ï≤òÎ¶¨

```bash
# 1. Í∞úÎ∞úÏûêÍ∞Ä Ïª§Î∞ã
$ git commit -m "feat: Add new component"

# 2. post-commit Hook
# ‚Üí Work QueueÏóê ÏûêÎèô Ï∂îÍ∞Ä

# 3. Claude Code (Î≥ÑÎèÑ Ïã§Ìñâ ÎòêÎäî cron)
$ claude-code "process-queue"

# 4. ÏûêÎèô Ï≤òÎ¶¨
# ‚Üí Processing Manifest Ï∂îÏ†Å
# ‚Üí ÏóêÏù¥Ï†ÑÌä∏ ÏàúÏ∞® Ïã§Ìñâ
# ‚Üí Completion Log Í∏∞Î°ù
# ‚Üí Î¨∏ÏÑú ÏûêÎèô Ïù¥Îèô
```

### Scenario 2: Ïõπ ÌÅ¥Î¶¨Ìïë ‚Üí Î∞∞Ïπò Ï≤òÎ¶¨

```bash
# 1. ÏÇ¨Ïö©ÏûêÍ∞Ä Ïó¨Îü¨ ÏïÑÌã∞ÌÅ¥ ÌÅ¥Î¶¨Ìïë
# ‚Üí 00_Inbox/Ïóê 5Í∞ú ÌååÏùº ÏÉùÏÑ±

# 2. ÌååÏùº Í∞êÏãúÏûêÍ∞Ä Work QueueÏóê Ï∂îÍ∞Ä
# ‚Üí 5Í∞ú Ìï≠Î™©Ïù¥ ÌÅêÏóê ÎåÄÍ∏∞

# 3. Claude Code Ïã§Ìñâ
$ claude-code "process-all-queue"

# 4. Î∞∞Ïπò Ï≤òÎ¶¨
# ‚Üí 5Í∞ú Î¨∏ÏÑú ÏàúÏ∞® Ï≤òÎ¶¨
# ‚Üí Í∞ÅÍ∞Å Processing Manifest Ï∂îÏ†Å
# ‚Üí Î™®Îëê ÏôÑÎ£å ÌõÑ Ï¢ÖÎ£å
```

### Scenario 3: Ïã§Ìå® Î≥µÍµ¨

```bash
# 1. Ï≤òÎ¶¨ Ï§ë ÎÑ§Ìä∏ÏõåÌÅ¨ ÏóêÎü¨Î°ú Ï§ëÎã®

# 2. Processing Manifest ÏÉÅÌÉú:
{
  "agent_pipeline": [
    {"name": "normalization", "status": "completed"},
    {"name": "keyword-extraction", "status": "failed"},
    {"name": "linking", "status": "pending"}
  ]
}

# 3. Claude Code Ïû¨Ïã§Ìñâ
$ claude-code "retry-failed"

# 4. ÏûêÎèô Î≥µÍµ¨
# ‚Üí Ïã§Ìå®Ìïú ÏóêÏù¥Ï†ÑÌä∏Î∂ÄÌÑ∞ Ïû¨ÏãúÏûë
# ‚Üí ÏôÑÎ£åÎêú ÏóêÏù¥Ï†ÑÌä∏Îäî Í±¥ÎÑàÎúÄ
```

---

## üìã AI ÏóêÏù¥Ï†ÑÌä∏Ïö© Ï≤¥ÌÅ¨Î¶¨Ïä§Ìä∏

### ‚úÖ ÌïÑÏàò Íµ¨ÌòÑ ÏÇ¨Ìï≠

- [ ] Work Queue ÏãúÏä§ÌÖú
- [ ] Processing Manifest ÏãúÏä§ÌÖú
- [ ] Completion Log ÏãúÏä§ÌÖú
- [ ] Resource Registry
- [ ] Glossary Index (ÏÇ¨Ï†Ñ ÎπåÎìú)
- [ ] ÏóêÏù¥Ï†ÑÌä∏ ÌëúÏ§Ä Ïù∏ÌÑ∞ÌéòÏù¥Ïä§
- [ ] ÌååÏùº Í∏∞Î∞ò ÏÉÅÌÉú Í¥ÄÎ¶¨

### ‚ùå Ï†úÍ±∞Ìï† Ïù∏Í∞Ñ Ï§ëÏã¨ ÏöîÏÜå

- [ ] Obsidian ÏïåÎ¶º Ï†úÍ±∞
- [ ] ÏÇ¨Ïö©Ïûê ÌîÑÎ°¨ÌîÑÌä∏ Ï†úÍ±∞
- [ ] ÏßÑÌñâ ÏÉÅÌÉú UI Ï†úÍ±∞
- [ ] ÏàòÎèô ÌôïÏù∏ Î™®Îìú Ï†úÍ±∞

### üîÑ Í∞úÏÑ†Ìï† ÏóêÏù¥Ï†ÑÌä∏ ÌäπÏÑ±

- [ ] Î©±Îì±ÏÑ± Î≥¥Ïû•
- [ ] Î∂ÄÎ∂Ñ Ïã§Ìå® ÌóàÏö©
- [ ] ÏÉÅÌÉú Í≤ÄÏ¶ù Ï∂îÍ∞Ä
- [ ] Ïû¨ÏãúÎèÑ Î°úÏßÅ Íµ¨ÌòÑ

---

## üîó ÌïµÏã¨ Í∞úÎÖê (Suggested Links)

### AI ÏóêÏù¥Ï†ÑÌä∏ ÏÑ§Í≥Ñ
- [[ÏÑ∏ÏÖò ÎèÖÎ¶ΩÏÑ±]]
- [[Î©±Îì±ÏÑ±]]
- [[ÏÉÅÌÉú Í∏∞Í≥Ñ]]
- [[Work Queue Ìå®ÌÑ¥]]

### Îç∞Ïù¥ÌÑ∞ Íµ¨Ï°∞
- [[Resource Registry]]
- [[Processing Manifest]]
- [[ÏÇ¨Ï†Ñ ÎπåÎìú Ïù∏Îç±Ïä§]]

### ÏãúÏä§ÌÖú ÌÜµÌï©
- [[ÌååÏùº Í∏∞Î∞ò ÏÉÅÌÉú Í¥ÄÎ¶¨]]
- [[ÏóêÏù¥Ï†ÑÌä∏ Í∞Ñ ÌÜµÏã†]]
- [[ÏûêÎèô Î≥µÍµ¨ Î©îÏª§ÎãàÏ¶ò]]

---

## ÏµúÏ¢Ö ÌèâÍ∞Ä

### ‚úÖ AI ÏóêÏù¥Ï†ÑÌä∏ Ï§ëÏã¨ ÏÑ§Í≥ÑÎ°ú Í∞úÏÑ†Îêú Ï†ê

1. **ÏÑ∏ÏÖò ÎèÖÎ¶ΩÏÑ±**: Ïñ∏Ï†úÎì† Ï§ëÎã®/Ïû¨Í∞ú Í∞ÄÎä•
2. **ÏôÑÏ†Ñ ÏûêÎèôÌôî**: Ïù∏Í∞Ñ Í∞úÏûÖ Î∂àÌïÑÏöî
3. **Î™ÖÌôïÌïú ÏÉÅÌÉú**: 3Í∞ú ÌååÏùºÎ°ú Î™®Îì† ÏÉÅÌÉú Ï∂îÏ†Å
4. **ÌôïÏû• Ïö©Ïù¥**: ÏÉà ÏóêÏù¥Ï†ÑÌä∏ Ï∂îÍ∞Ä Í∞ÑÎã®

### ‚ö†Ô∏è Ï£ºÏùòÏÇ¨Ìï≠

1. **ÌååÏùº ÎèôÍ∏∞Ìôî**: ÎèôÏãú Ïã§Ìñâ Ïãú Ï∂©Îèå Î∞©ÏßÄ ÌïÑÏöî
2. **ÏóêÎü¨ ÎàÑÏ†Å**: Manifest Ï†ïÎ¶¨ Î©îÏª§ÎãàÏ¶ò ÌïÑÏöî
3. **ÏÑ±Îä•**: Queue ÌÅ¨Í∏∞ Ï†úÌïú Í≥†Î†§

Ïù¥Ï†ú **ÏôÑÏ†ÑÌûà ÏûêÎèôÌôîÎêú AI ÏóêÏù¥Ï†ÑÌä∏ ÏõåÌÅ¨ÌîåÎ°úÏö∞**Í∞Ä ÏôÑÏÑ±ÎêòÏóàÏäµÎãàÎã§! ü§ñ